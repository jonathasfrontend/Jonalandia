const { EmbedBuilder } = require('discord.js');
const { logger, commandExecuted } = require('../logger');

async function Help(interaction) {
  try {
    const context = {
      module: 'COMMAND',
      command: 'help',
      user: interaction.user.tag,
      guild: interaction.guild?.name
    };

    logger.debug('Iniciando comando help', context);

    const embed = new EmbedBuilder()
      .setTitle('üìã Comandos do Bot Jonalandia')
      .setColor('#7289DA')
      .setDescription('Aqui est√° a lista de comandos dispon√≠veis no bot. Use-os conforme necess√°rio!')
      .addFields(
          { name: 'ü§ñ Comandos Gerais', value: '`/oi` - Responde com Ol√°!\n`/help` - Exibe esta mensagem de ajuda\n`/server` - Exibe informa√ß√µes do servidor\n`/clima` - Mostra a previs√£o do tempo para uma cidade\n`/aniversario` - Registra o dia do seu anivers√°rio' },
          { name: 'üéüÔ∏è Comandos de Sorteios', value: '`/sorteio` - Cadastra usu√°rio para participar do sorteio\n`/infosorteio` - Lista participantes e informa√ß√µes do sorteio\n`/premiosorteio` - Cadastra pr√™mio para sorteio (Moderador)\n`/limpasorteio` - Limpa todos os participantes do sorteio (Moderador)\n`/sortear` - Realiza o sorteio e exibe o vencedor (Moderador)' },
          { name: 'üõ†Ô∏è Comandos de Modera√ß√£o', value: '`/regra` - Responde embed de regras do servidor (Moderador)\n`/clean` - Limpa mensagens do canal ou de usu√°rio espec√≠fico (Moderador)\n`/timeout` - Aplica timeout de 3 minutos em um usu√°rio (Moderador)\n`/expulsar` - Expulsa um usu√°rio do servidor (Moderador)\n`/banir` - Bane um usu√°rio do servidor (Moderador)\n`/desbanir` - Desbane um usu√°rio do servidor (Moderador)\n`/kickuser` - Expulsa um usu√°rio do canal de voz (Moderador)\n`/embed` - Cria um embed personalizado (Moderador)\n`/ficha` - Busca dados do usu√°rio no servidor (Moderador)\n`/voteparaban` - Inicia vota√ß√£o para banir um usu√°rio\n`/excluicomando` - Exclui um comando do bot (Moderador)' },
          { name: 'üéÆ Comandos de Interface', value: '`/cargo` - Mostra bot√µes dos cargos (Moderador)\n`/ticket` - Mostra bot√£o para abrir ticket\n`/manutencao` - Mensagem de manuten√ß√£o (Moderador)' },
          { name: '‚öôÔ∏è Comandos de Inicializa√ß√£o do Bot', value: '`/addtwitch` - Cadastra streamer para notifica√ß√£o (Moderador)\n`/addyoutube` - Cadastra canal do YouTube para notifica√ß√£o (Moderador)\n`/addchannels` - Adiciona canais ao banco de dados (Moderador)\n`/removechannels` - Remove canal do banco de dados (Moderador)' },
          { name: 'üîÑ Funcionalidades Autom√°ticas', value: `
              **AntiFloodChat** - Detecta e limita mensagens enviadas rapidamente
              **BlockLinks** - Bloqueia links indesejados em chats
              **DetectInappropriateWords** - Detecta e filtra palavras inadequadas
              **AutoKickNewMembers** - Remove membros novos com comportamento suspeito
              **Birthday Notifications** - Notifica√ß√µes para aniversariantes do dia
              **YouTube/Twitch Monitor** - Monitora canais e streamers cadastrados
              **Free Games Monitor** - Monitora promo√ß√µes de jogos gratuitos
          `}
      )
      .setFooter({ text: 'Jonalandia Bot - Sempre ajudando voc√™!', iconURL: interaction.client.user.displayAvatarURL() });

    await interaction.reply({ embeds: [embed] });
    
    commandExecuted('help', interaction.user, interaction.guild, true);
    logger.info('Lista de comandos exibida com sucesso', context);

  } catch (error) {
    const context = {
      module: 'COMMAND',
      command: 'help',
      user: interaction.user.tag,
      guild: interaction.guild?.name
    };

    logger.error('Erro ao executar comando help', context, error);
    commandExecuted('help', interaction.user, interaction.guild, false);

    if (!interaction.replied) {
      await interaction.reply({ content: 'Ocorreu um erro ao exibir a lista de comandos.', ephemeral: true });
    }
  }
}

module.exports = { Help };
